<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MESSAGE_LENGTH" elementType="Argument">
            <stringProp name="Argument.name">MESSAGE_LENGTH</stringProp>
            <stringProp name="Argument.value">256</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ZOOKEEPER_SERVER" elementType="Argument">
            <stringProp name="Argument.name">ZOOKEEPER_SERVER</stringProp>
            <stringProp name="Argument.value"> ${__env(ZOOKEEPER_SERVICE_SERVICE_HOST)}:${__env(ZOOKEEPER_SERVICE_SERVICE_PORT)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TOPIC" elementType="Argument">
            <stringProp name="Argument.name">TOPIC</stringProp>
            <stringProp name="Argument.value">test</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="KAFKA_SERVER" elementType="Argument">
            <stringProp name="Argument.name">KAFKA_SERVER</stringProp>
            <stringProp name="Argument.value">${__env(KAFKA_SERVICE_SERVICE_HOST)}:${__env(KAFKA_SERVICE_SERVICE_PORT)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USERS" elementType="Argument">
            <stringProp name="Argument.name">USERS</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TEST_DURATION" elementType="Argument">
            <stringProp name="Argument.name">TEST_DURATION</stringProp>
            <stringProp name="Argument.value">60000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="INFLUXDB_HOST" elementType="Argument">
            <stringProp name="Argument.name">INFLUXDB_HOST</stringProp>
            <stringProp name="Argument.value">10.104.172.231</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="STARTTIME" elementType="Argument">
            <stringProp name="Argument.name">STARTTIME</stringProp>
            <stringProp name="Argument.value">${__time()}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Users\Richard\Documents\School\AfstudeerStage\jmeter\jmeter-plugins-cmn-jmeter-0.7.jar,C:\Users\Richard\Documents\School\AfstudeerStage\jmeter\jmeter-plugins-functions-2.1.jar,C:\Users\Richard\Documents\School\AfstudeerStage\jmeter\jmeter-plugins-manager-1.7.jar,C:\Users\Richard\Documents\School\AfstudeerStage\jmeter\kafka-clients-3.2.0.jar,C:\Users\Richard\Documents\School\AfstudeerStage\jmeter\pepper-box-1.0.jar</stringProp>
    </TestPlan>
    <hashTree>
      <com.gslab.pepper.config.plaintext.PlainTextConfigElement guiclass="TestBeanGUI" testclass="com.gslab.pepper.config.plaintext.PlainTextConfigElement" testname="message" enabled="true">
        <stringProp name="jsonSchema">&quot;${__RandomString(${MESSAGE_LENGTH}, abc)}&quot;</stringProp>
        <stringProp name="placeHolder">MESSAGE</stringProp>
      </com.gslab.pepper.config.plaintext.PlainTextConfigElement>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Producer" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${USERS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">5</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="kafka-request" enabled="true">
          <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="bootstrap.servers" elementType="Argument">
                <stringProp name="Argument.name">bootstrap.servers</stringProp>
                <stringProp name="Argument.value">${KAFKA_SERVER}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zookeeper.servers" elementType="Argument">
                <stringProp name="Argument.name">zookeeper.servers</stringProp>
                <stringProp name="Argument.value">${ZOOKEEPER_SERVER}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kafka.topic.name" elementType="Argument">
                <stringProp name="Argument.name">kafka.topic.name</stringProp>
                <stringProp name="Argument.value">${TOPIC}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="key.serializer" elementType="Argument">
                <stringProp name="Argument.name">key.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="value.serializer" elementType="Argument">
                <stringProp name="Argument.name">value.serializer</stringProp>
                <stringProp name="Argument.value">org.apache.kafka.common.serialization.StringSerializer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="compression.type" elementType="Argument">
                <stringProp name="Argument.name">compression.type</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="batch.size" elementType="Argument">
                <stringProp name="Argument.name">batch.size</stringProp>
                <stringProp name="Argument.value">16384</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="linger.ms" elementType="Argument">
                <stringProp name="Argument.name">linger.ms</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="buffer.memory" elementType="Argument">
                <stringProp name="Argument.name">buffer.memory</stringProp>
                <stringProp name="Argument.value">33554432</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="acks" elementType="Argument">
                <stringProp name="Argument.name">acks</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">send.buffer.bytes</stringProp>
                <stringProp name="Argument.value">131072</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="receive.buffer.bytes" elementType="Argument">
                <stringProp name="Argument.name">receive.buffer.bytes</stringProp>
                <stringProp name="Argument.value">32768</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="security.protocol" elementType="Argument">
                <stringProp name="Argument.name">security.protocol</stringProp>
                <stringProp name="Argument.value">PLAINTEXT</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="message.placeholder.key" elementType="Argument">
                <stringProp name="Argument.name">message.placeholder.key</stringProp>
                <stringProp name="Argument.value">MESSAGE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="kerberos.auth.enabled" elementType="Argument">
                <stringProp name="Argument.name">kerberos.auth.enabled</stringProp>
                <stringProp name="Argument.value">NO</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.auth.login.config" elementType="Argument">
                <stringProp name="Argument.name">java.security.auth.login.config</stringProp>
                <stringProp name="Argument.value">&lt;JAAS File Location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="java.security.krb5.conf" elementType="Argument">
                <stringProp name="Argument.name">java.security.krb5.conf</stringProp>
                <stringProp name="Argument.value">&lt;krb5.conf location&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sasl.kerberos.service.name" elementType="Argument">
                <stringProp name="Argument.name">sasl.kerberos.service.name</stringProp>
                <stringProp name="Argument.value">kafka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="classname">com.gslab.pepper.sampler.PepperBoxKafkaSampler</stringProp>
        </JavaSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="setup consumers" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Create + Subscribe" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import org.apache.kafka.clients.consumer.KafkaConsumer;
import java.time.Duration;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import java.util.concurrent.TimeUnit;


String brokers = vars.get(&quot;KAFKA_SERVER&quot;);
String topic = vars.get(&quot;TOPIC&quot;);
int numUsers = Integer.valueOf(vars.get(&quot;USERS&quot;));

Properties props=new Properties();
props.put(&quot;bootstrap.servers&quot;,brokers);
props.put(&quot;enable.auto.commit&quot;,&quot;true&quot;);
props.put(&quot;auto.commit.interval.ms&quot;,&quot;1000&quot;);
props.put(&quot;session.timeout.ms&quot;,&quot;30000&quot;);
props.put(&quot;key.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);
props.put(&quot;value.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);
props.put(&quot;group.id&quot;, &quot;user-&quot; + String.valueOf(2));
props.put(&quot;client.id&quot;, &quot;consumer-client-&quot;+String.valueOf(2));

KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(props); 
consumer.subscribe(Arrays.asList(topic));
System.out.println(&quot;subscribed to &quot; + topic);

int emptyCount = 0;

while(true) {
	ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(150));
	if (records.isEmpty()) {
		System.out.println(&quot;polled for record isEmpty &quot; + emptyCount);
		emptyCount++;
		if(emptyCount &gt;= 100) {
			break;	
		}
		continue;
	}
	emptyCount = 0;
	for(ConsumerRecord&lt;String, String&gt; record : records) {
		System.out.printf(&quot;offset = %d, key = %s, value = %s\n&quot;,record.offset(),record.key(),record.value());
	}
	consumer.commitSync();
}
System.out.println(&quot;Closing consumer&quot;)
consumer.close();</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="influx" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://${INFLUXDB_HOST}:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">kafka workload 1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="send times to influxdb" enabled="true">
        <stringProp name="cacheKey">true</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.util.EntityUtils;

long starttime = Long.valueOf(vars.get(&quot;STARTTIME&quot;))
long totaltime = (${__time()} - starttime);
System.out.println(&quot;starttime = &quot; + starttime)
System.out.println(&quot;totaltime = &quot; + totaltime);

result = new StringBuilder();

status = &quot;Failure&quot;;
if (sampleResult.isSuccessful())
    status = &quot;Success&quot;;

//Expected format to post the result
//samples,label=lbl,status=status count=count,duration=duration,responsecode=rc timestamp

result.append(&quot;totaltime,&quot;) //samples is the table name in InfluxDB which we will create at run time.
    .append(&quot;starttime=&quot;)
    .append(totaltime);

//Escape the string values before posting the data

String escapeValue(String val) {

    val = val.replaceAll(&quot;,&quot;, &quot;\\\\,&quot;)
        .replaceAll(&quot; &quot;, &quot;\\\\ &quot;)
        .replaceAll(&quot;=&quot;, &quot;\\\\=&quot;)
        .trim();

    return val;
}

void PostMeasurement(String metric) {

    def httpclient = new DefaultHttpClient(new BasicHttpParams());
    def httpPost = new HttpPost();

    //URL format : http://[ipaddress]:[port]/write?db=[database]

    httpPost.setURI(new URI(&quot;http://${INFLUXDB_HOST}:8086/write?db=jmeter&quot;));
    log.info(&quot;Result : &quot; + metric);
    httpPost.setEntity(new StringEntity(metric));
    HttpResponse response = httpclient.execute(httpPost);
    EntityUtils.consumeQuietly(response.getEntity());

}
PostMeasurement(result.toString());
</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
